!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AnchorBoard	StringBoard.h	/^	typedef std::vector<anchor_t> AnchorBoard;$/;"	t	class:StringBoard
Anchors	StringBoard.h	/^	typedef std::set<anchor_t> Anchors;$/;"	t	class:StringBoard
ArraySize	Const.h	/^	const int ArraySize;$/;"	m	class:Const
BLACK	types.h	/^	EMPTY, BLACK, WHITE, OB, COLOR_NUM = 3$/;"	e	enum:Color
BOARD_H	DiskBoard.h	2;"	d
BlackWhite	types.h	/^	BlackWhite() : bw(BLACK) {}$/;"	f	struct:BlackWhite
BlackWhite	types.h	/^struct BlackWhite$/;"	s
BlockBegin	SgfCommand.h	/^	BlockBegin,$/;"	e	enum:sgfcommand_t
BlockEnd	SgfCommand.h	/^	BlockEnd,$/;"	e	enum:sgfcommand_t
Board	Viewer.h	/^	typedef StringBoard Board;$/;"	t	class:Viewer
CDEF	console.h	64;"	d
CDEF	console.h	72;"	d
CHECK_CHAR_DUPLICATE	table.h	35;"	d
CHECK_ID_DUPLICATE	table.h	38;"	d
COLOR_NUM	types.h	/^	EMPTY, BLACK, WHITE, OB, COLOR_NUM = 3$/;"	e	enum:Color
CONST_H	Const.h	2;"	d
Chinese	types.h	/^	Chinese, Japanese$/;"	e	enum:Rule
Color	types.h	/^enum Color$/;"	g
Command	console.h	/^	Command(command_t type, const std::string& param="")$/;"	f	struct:Command
Command	console.h	/^struct Command$/;"	s
CommandMap	console.h	/^	typedef std::map<std::string, Command::command_t> CommandMap;$/;"	t	struct:Input
Const	Const.h	/^	Const(int size)$/;"	f	class:Const
Const	Const.h	/^class Const$/;"	c
DiskBoard	DiskBoard.h	/^	DiskBoard(int size)$/;"	f	struct:DiskBoard
DiskBoard	DiskBoard.h	/^struct DiskBoard : public Const$/;"	s
E	Const.h	/^	static int	E (int pos)       { return pos + East; }$/;"	f	class:Const
ELSEIF	SgfCommand.h	59;"	d
ELSEIFS	SgfCommand.h	61;"	d
EMPTY	types.h	/^	EMPTY, BLACK, WHITE, OB, COLOR_NUM = 3$/;"	e	enum:Color
East	Const.h	/^	static const int East = +1, West = -1;$/;"	m	class:Const
ExSize	Const.h	/^	const int ExSize;$/;"	m	class:Const
FF4_COMMAND	SgfCommand.h	/^		FF4_COMMAND(YONLY)$/;"	e	enum:sgfcommand_t
FF4_COMMAND	SgfCommand.h	140;"	d
FF4_COMMAND	SgfCommand.h	8;"	d
FILEHEAD	DiskBoard.h	107;"	d
FILE_HEAD	DiskBoard.h	81;"	d
GameInfo	Sgf.h	/^struct GameInfo$/;"	s
ID_BOARD	table.h	16;"	d
ID_GAME	table.h	4;"	d
INPUT_H	console.h	3;"	d
Input	console.h	/^	Input()$/;"	f	struct:Input
Input	console.h	/^struct Input$/;"	s
InvalidAnchor	StringBoard.h	/^	static const anchor_t InvalidAnchor = 0;$/;"	m	class:StringBoard
Item	option.h	/^		Item(const std::string& description, const Value& v)$/;"	f	struct:Option::Item
Item	option.h	/^		Item(const std::string& description="")$/;"	f	struct:Option::Item
Item	option.h	/^	struct Item	$/;"	s	class:Option
Items	option.h	/^	struct Items : std::map<std::string, Item>$/;"	s	class:Option
Japanese	types.h	/^	Chinese, Japanese$/;"	e	enum:Rule
KEYS	console.h	/^		KEYS(YONLY)$/;"	e	enum:Command::command_t
KEYS	console.h	133;"	d
KEYS	console.h	28;"	d
MoveEffect	StringBoard.h	/^	struct MoveEffect$/;"	s	class:StringBoard
N	Const.h	/^	int			N (int pos) const { return pos + North; }$/;"	f	class:Const
NE	Const.h	/^	int			NE(int pos)	const { return pos + NorthEast; }$/;"	f	class:Const
NEIGHBOURS	Const.h	/^		static const int NEIGHBOURS = 4; \/\/ NEWS$/;"	m	class:Const::News
NW	Const.h	/^	int			NW(int pos)	const { return pos + NorthWest; }$/;"	f	class:Const
NewNode	SgfCommand.h	/^	NewNode,		$/;"	e	enum:sgfcommand_t
News	Const.h	/^	class News$/;"	c	class:Const
North	Const.h	/^	const int North, South;$/;"	m	class:Const
NorthEast	Const.h	/^	const int NorthEast, NorthWest, SouthEast, SouthWest;$/;"	m	class:Const
NorthWest	Const.h	/^	const int NorthEast, NorthWest, SouthEast, SouthWest;$/;"	m	class:Const
NullMove	Const.h	/^	static const position_t NullMove = 0;$/;"	m	class:Const
OB	types.h	/^	EMPTY, BLACK, WHITE, OB, COLOR_NUM = 3$/;"	e	enum:Color
OPTION_H	option.h	5;"	d
Option	option.h	/^	Option(const std::string& description_title, int description_name_columns)$/;"	f	class:Option
Option	option.h	/^class Option$/;"	c
PDEF	console.h	65;"	d
PDEF	console.h	73;"	d
ParamMap	console.h	/^	typedef std::map<Command::command_t, bool> ParamMap;$/;"	t	struct:Input
Pass	Const.h	/^	static const position_t Pass = 1;$/;"	m	class:Const
Player	Sgf.h	/^	struct Player$/;"	s	struct:GameInfo
Positions	String.h	/^typedef std::set<position_t> Positions;$/;"	t
Resign	Const.h	/^	static const position_t Resign = 2;$/;"	m	class:Const
Rule	types.h	/^enum Rule$/;"	g
S	Const.h	/^	int			S (int pos) const { return pos + South; }$/;"	f	class:Const
SE	Const.h	/^	int			SE(int pos)	const { return pos + SouthEast; }$/;"	f	class:Const
SGF_COMMANDS_H	SgfCommand.h	2;"	d
SGF_H	Sgf.h	3;"	d
STRING_BOARD_H	StringBoard.h	3;"	d
STRING_H	String.h	2;"	d
SW	Const.h	/^	int			SW(int pos)	const { return pos + SouthWest; }$/;"	f	class:Const
Sgf	Sgf.h	/^	Sgf(const std::string& filename="", int default_size=19)$/;"	f	struct:Sgf
Sgf	Sgf.h	/^struct Sgf$/;"	s
SgfCommand	SgfCommand.h	/^struct SgfCommand$/;"	s
SgfMove	Sgf.h	/^struct SgfMove$/;"	s
SgfMoves	Sgf.h	/^	SgfMoves()$/;"	f	class:SgfMoves
SgfMoves	Sgf.h	/^class SgfMoves : public std::vector<SgfMove>$/;"	c
Size	Const.h	/^	const int Size;$/;"	m	class:Const
South	Const.h	/^	const int North, South;$/;"	m	class:Const
SouthEast	Const.h	/^	const int NorthEast, NorthWest, SouthEast, SouthWest;$/;"	m	class:Const
SouthWest	Const.h	/^	const int NorthEast, NorthWest, SouthEast, SouthWest;$/;"	m	class:Const
String	String.h	/^struct String$/;"	s
StringBoard	StringBoard.h	/^	StringBoard(int size)$/;"	f	class:StringBoard
StringBoard	StringBoard.h	/^class StringBoard : public DiskBoard$/;"	c
Strings	StringBoard.h	/^	typedef std::map<anchor_t, String> Strings;$/;"	t	class:StringBoard
TYPES_H	types.h	3;"	d
USAGE_STR	table.h	32;"	d
UTIL_H	util.h	2;"	d
Unknown	SgfCommand.h	/^	Unknown,$/;"	e	enum:sgfcommand_t
Unknown	console.h	/^		Unknown,$/;"	e	enum:Command::command_t
Usage	main.cpp	/^const std::string Usage =$/;"	v
VIEWER_H	Viewer.h	3;"	d
Value	option.h	/^		Value() : defaulted(false), given(false) {}$/;"	f	struct:Option::Value
Value	option.h	/^		Value(const Value& v) $/;"	f	struct:Option::Value
Value	option.h	/^		Value(const type& v)$/;"	f	struct:Option::Value
Value	option.h	/^	struct Value$/;"	s	class:Option
Viewer	Viewer.h	/^class Viewer$/;"	c
W	Const.h	/^	static int	W (int pos)	      { return pos + West; }$/;"	f	class:Const
WHITE	types.h	/^	EMPTY, BLACK, WHITE, OB, COLOR_NUM = 3$/;"	e	enum:Color
West	Const.h	/^	static const int East = +1, West = -1;$/;"	m	class:Const
YONLY	SgfCommand.h	49;"	d
YONLY	SgfCommand.h	51;"	d
YONLY	console.h	40;"	d
YONLY	console.h	42;"	d
_description_name_columns	option.h	/^	unsigned _description_name_columns; \/\/\/ skip length for display$/;"	m	class:Option
_description_title	option.h	/^	std::string _description_title; \/\/\/ heading title for display$/;"	m	class:Option
_items	option.h	/^	Items _items; \/\/\/ unordered option list$/;"	m	class:Option
_ordered_value	option.h	/^	std::vector<std::string> _ordered_value; \/\/ ordered option list$/;"	m	class:Option
add_comment	Sgf.h	/^	void add_comment(const std::string& str)$/;"	f	struct:Sgf
anchor	String.h	/^	int anchor() const$/;"	f	struct:String
anchor_board	StringBoard.h	/^	AnchorBoard anchor_board;$/;"	m	class:StringBoard
anchor_t	types.h	/^typedef position_t anchor_t;$/;"	t
annotation	Sgf.h	/^	std::string annotation;$/;"	m	struct:GameInfo
black	Sgf.h	/^	Player black, white;$/;"	m	struct:GameInfo
board	Viewer.h	/^	std::auto_ptr<Board> board;$/;"	m	class:Viewer
board_size	Sgf.h	/^	int board_size;$/;"	m	struct:GameInfo
boolret	util.h	/^typedef comret<bool> boolret;$/;"	t
bw	types.h	/^	int bw;$/;"	m	struct:BlackWhite
capturable	StringBoard.h	/^		Anchors capturable;  \/\/ subset of enemies$/;"	m	struct:StringBoard::MoveEffect
captures	DiskBoard.h	/^	int captures[COLOR_NUM];$/;"	m	struct:DiskBoard
change_board_size	Sgf.h	/^	void change_board_size(int new_size)$/;"	f	struct:Sgf
charactor_encoding	Sgf.h	/^	std::string charactor_encoding;$/;"	m	struct:GameInfo
clsprint	console.h	/^inline void clsprint(const std::string& str)$/;"	f
cmap	console.h	/^	CommandMap cmap; \/\/ key to command$/;"	m	struct:Input
command_t	console.h	/^	enum command_t$/;"	g	struct:Command
comment	Sgf.h	/^	std::string comment;$/;"	m	struct:SgfMove
comret	util.h	/^	comret(const return_type& ret, std::ostream& os = std::cerr)$/;"	f	struct:comret
comret	util.h	/^struct comret$/;"	s
constants	Sgf.h	/^	std::auto_ptr<Const> constants;$/;"	m	struct:Sgf
copyright	Sgf.h	/^	std::string copyright;$/;"	m	struct:GameInfo
count	option.h	/^	size_t count() const$/;"	f	class:Option
date	Sgf.h	/^	std::string date;$/;"	m	struct:GameInfo
default_value	option.h	/^		std::string default_value; \/\/\/ the default value$/;"	m	struct:Option::Value
defaulted	option.h	/^		bool defaulted; \/\/\/ whether value is defaulted$/;"	m	struct:Option::Value
description	option.h	/^		std::string description; \/\/\/ description of item$/;"	m	struct:Option::Item
disk	DiskBoard.h	/^	Color* disk; \/\/ array$/;"	m	struct:DiskBoard
disk_on	DiskBoard.h	/^	Color disk_on(position_t pos) const$/;"	f	struct:DiskBoard
edit_current	Sgf.h	/^	SgfMove& edit_current()$/;"	f	class:SgfMoves
edit_current_index	Sgf.h	/^	int edit_current_index()$/;"	f	class:SgfMoves
edit_index	Sgf.h	/^	int edit_index;$/;"	m	class:SgfMoves
edit_next	Sgf.h	/^	void edit_next()$/;"	f	class:SgfMoves
enemies	StringBoard.h	/^		Anchors enemies;     \/\/ will decrease their librty or die$/;"	m	struct:StringBoard::MoveEffect
event_name	Sgf.h	/^	std::string event_name;$/;"	m	struct:GameInfo
exstring	util.h	/^	exstring(const std::string& str="")$/;"	f	struct:exstring
exstring	util.h	/^struct exstring : public std::string$/;"	s
file	Const.h	/^	static char file(int x) { return " ABCDEFGHJKLMNOPQRSTUVWXYZ"[x]; }$/;"	f	class:Const
file_format_version	Sgf.h	/^	int file_format_version;$/;"	m	struct:GameInfo
filename	Sgf.h	/^	std::string filename;$/;"	m	struct:GameInfo
friends	StringBoard.h	/^		Anchors friends;     \/\/ will united to the above string$/;"	m	struct:StringBoard::MoveEffect
game_comment	Sgf.h	/^	std::string game_comment;$/;"	m	struct:GameInfo
game_name	Sgf.h	/^	std::string game_name;$/;"	m	struct:GameInfo
get	option.h	/^		type get() const$/;"	f	struct:Option::Value
get	option.h	/^	type get(const std::string& name) const$/;"	f	class:Option
get	option.h	/^	type get(unsigned nth) const$/;"	f	class:Option
given	option.h	/^		bool given; \/\/\/ whether value is given in rutime$/;"	m	struct:Option::Value
given_value	option.h	/^ 		std::string given_value; \/\/\/ the given value$/;"	m	struct:Option::Value
goto_ply	Viewer.h	/^	void goto_ply(int ply)$/;"	f	class:Viewer
gtp2pos	Const.h	/^	position_t gtp2pos(const std::string& gtp_move) const$/;"	f	class:Const
handicap_stones	Sgf.h	/^	int handicap_stones;$/;"	m	struct:GameInfo
has	option.h	/^	bool has(const std::string& name) const \/\/ HACK$/;"	f	class:Option
has_arg	option.h	/^		bool has_arg; \/\/\/ whether item has argument$/;"	m	struct:Option::Item
index	Const.h	/^		int index;$/;"	m	class:Const::News
info	Sgf.h	/^	GameInfo info;$/;"	m	struct:Sgf
init	DiskBoard.h	/^	void init()$/;"	f	struct:DiskBoard
init	Sgf.h	/^	void init()$/;"	f	class:SgfMoves
init	Sgf.h	/^	void init()$/;"	f	struct:SgfMove
init	SgfCommand.h	/^	void init()$/;"	f	struct:SgfCommand
init	String.h	/^	void init()$/;"	f	struct:String
init	StringBoard.h	/^		void init()$/;"	f	struct:StringBoard::MoveEffect
init	StringBoard.h	/^	void init()$/;"	f	class:StringBoard
init	Viewer.h	/^	bool init(const std::string& filename, int ply)$/;"	f	class:Viewer
input	Viewer.h	/^	Input input;$/;"	m	class:Viewer
intret	util.h	/^typedef comret<int> intret;$/;"	t
is_disk	DiskBoard.h	/^	bool is_disk(position_t pos, Color d) const$/;"	f	struct:DiskBoard
is_empty	DiskBoard.h	/^	bool is_empty(position_t pos) const$/;"	f	struct:DiskBoard
is_notob	StringBoard.h	/^	bool is_notob(int pos)$/;"	f	class:StringBoard
is_onboard	Const.h	/^	bool is_onboard(int pos) const$/;"	f	class:Const
is_onboard	Const.h	/^	bool is_onboard(int x, int y) const$/;"	f	class:Const
is_onexboard	Const.h	/^	bool is_onexboard(position_t pos) const$/;"	f	class:Const
join	String.h	/^	void join(const String& s)$/;"	f	struct:String
komi	DiskBoard.h	/^	double komi;$/;"	m	struct:DiskBoard
komi	Sgf.h	/^	double komi;$/;"	m	struct:GameInfo
last_move	DiskBoard.h	/^	position_t last_move;$/;"	m	struct:DiskBoard
length	option.h	/^		size_t length() const$/;"	f	struct:Option::Value
lex_cast	util.h	/^type lex_cast(const std::string& str)$/;"	f
liberty	String.h	/^	Positions liberty;$/;"	m	struct:String
lines	Sgf.h	/^	int lines;$/;"	m	struct:GameInfo
load	Sgf.h	/^	bool load(const std::string& filename)$/;"	f	struct:Sgf
loop	Viewer.h	/^	void loop()$/;"	f	class:Viewer
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
make	StringBoard.h	/^	void make(const std::string& gtp_move)$/;"	f	class:StringBoard
make	StringBoard.h	/^	void make(position_t pos)$/;"	f	class:StringBoard
make_virtual	StringBoard.h	/^	MoveEffect make_virtual(Color color, int pos) const$/;"	f	class:StringBoard
mark	Const.h	/^	static char mark(Color d) { return ".XO?"[d]; }$/;"	f	class:Const
move	Sgf.h	/^	position_t move;$/;"	m	struct:SgfMove
moves	Sgf.h	/^	SgfMoves moves;$/;"	m	struct:Sgf
name	Sgf.h	/^		std::string name;$/;"	m	struct:GameInfo::Player
news	Const.h	/^	News news(int pos) const$/;"	f	class:Const
next	Const.h	/^		void next() { index++; }$/;"	f	class:Const::News
next	types.h	/^	void next() { bw++; }$/;"	f	struct:BlackWhite
openingng	Sgf.h	/^	std::string openingng;$/;"	m	struct:GameInfo
operator ()	option.h	/^		Items& operator()(const std::string& name, const Value& v, const std::string& description)$/;"	f	struct:Option::Items
operator ()	option.h	/^		Items& operator()(const std::string& name, const std::string& description)$/;"	f	struct:Option::Items
operator *	Const.h	/^		int operator* () const { return pos[index]; }$/;"	f	class:Const::News
operator *	types.h	/^	Color operator* () const { return static_cast<Color>( bw ); }$/;"	f	struct:BlackWhite
operator <<	option.h	/^	friend std::ostream& operator<<(std::ostream& os, const Option& o)$/;"	f	class:Option
operator <<	util.h	/^	comret& operator << (const type& v)$/;"	f	struct:comret
operator <<	util.h	/^	tstream& operator << (const type& v)$/;"	f	struct:tstream
operator =	option.h	/^		void operator=(const Item& i)$/;"	f	struct:Option::Item
operator =	option.h	/^		void operator=(const Value& v)$/;"	f	struct:Option::Value
operator >>	types.h	/^std::istream& operator >> (std::istream& is, Rule& rule)$/;"	f
operator []	option.h	/^	const std::string operator[](const std::string& key) const$/;"	f	class:Option
operator []	option.h	/^	const std::string& operator[](unsigned nth) const$/;"	f	class:Option
operator bool	Const.h	/^		operator bool() const  { return index < NEIGHBOURS; }$/;"	f	class:Const::News
operator bool	types.h	/^	operator bool() const { return bw == BLACK || bw == WHITE; }$/;"	f	struct:BlackWhite
operator position_t	Sgf.h	/^	operator position_t() const$/;"	f	struct:SgfMove
operator return_type	util.h	/^	operator return_type() const$/;"	f	struct:comret
operator std::string	util.h	/^	operator std::string() const$/;"	f	struct:tstream
opponent	Const.h	/^	static Color opponent(Color turn)$/;"	f	class:Const
os	util.h	/^	std::ostream& os;$/;"	m	struct:comret
param	SgfCommand.h	/^	exstring param;$/;"	m	struct:SgfCommand
param	console.h	/^	exstring param;$/;"	m	struct:Command
parse	option.h	/^	void parse(int argc, char const* argv[], int start=1)$/;"	f	class:Option
place	Sgf.h	/^	std::string place;$/;"	m	struct:GameInfo
player	Const.h	/^	static std::string player(Color turn)$/;"	f	class:Const
ply	DiskBoard.h	/^	int ply;$/;"	m	struct:DiskBoard
pmap	console.h	/^	ParamMap pmap;$/;"	m	struct:Input
pos	Const.h	/^		int pos[NEIGHBOURS];$/;"	m	class:Const::News
pos2gtp	Const.h	/^	std::string pos2gtp(position_t pos) const$/;"	f	class:Const
pos2sgf	Const.h	/^	std::string pos2sgf(position_t pos) const$/;"	f	class:Const
position_t	types.h	/^typedef short position_t;$/;"	t
positions	String.h	/^	Positions positions;$/;"	m	struct:String
rank	Const.h	/^	std::string rank(int y) const { return tstream(Size - y + 1); }$/;"	f	class:Const
rank	Sgf.h	/^		std::string rank;$/;"	m	struct:GameInfo::Player
raw	option.h	/^		std::string raw() const$/;"	f	struct:Option::Value
read_command	SgfCommand.h	/^	bool read_command(std::istream& is)$/;"	f	struct:SgfCommand
replace	DiskBoard.h	/^	void replace(Color d, position_t pos)$/;"	f	struct:DiskBoard
result	Sgf.h	/^	std::string result;$/;"	m	struct:GameInfo
ret	util.h	/^	return_type ret;$/;"	m	struct:comret
round_of_game	Sgf.h	/^	std::string round_of_game;$/;"	m	struct:GameInfo
rule	Sgf.h	/^	Rule rule;$/;"	m	struct:GameInfo
run	Viewer.h	/^	void run(int argc=0, char* argv[]=NULL)$/;"	f	class:Viewer
sample	option.h	/^	static void sample(int argc, const char* argv[])$/;"	f	class:Option
second_last	DiskBoard.h	/^	position_t second_last;$/;"	m	struct:DiskBoard
set	option.h	/^		bool set; \/\/\/ whether item given value in runtime$/;"	m	struct:Option::Item
set	option.h	/^		void set(const std::string& v)$/;"	f	struct:Option::Value
set_anchors	StringBoard.h	/^	void set_anchors(anchor_t anchor, const Positions& positions)$/;"	f	class:StringBoard
set_options	option.h	/^	Items& set_options() { return _items; }$/;"	f	class:Option
sgf	Viewer.h	/^	Sgf sgf;$/;"	m	class:Viewer
sgf2pos	Const.h	/^	position_t sgf2pos(const std::string& sgf_move, bool fail_on_exception=false) const$/;"	f	class:Const
sgfcommand_t	SgfCommand.h	/^enum sgfcommand_t$/;"	g
show	DiskBoard.h	/^	void show(std::ostream& os=std::cout) const$/;"	f	struct:DiskBoard
show	String.h	/^	void show(const Const& c, std::ostream& os=std::cout) const$/;"	f	struct:String
show	String.h	/^	void show(std::ostream& os=std::cout) const$/;"	f	struct:String
show_debug	String.h	/^	void show_debug() const$/;"	f	struct:String
show_strings	StringBoard.h	/^	void show_strings(std::ostream& os=std::cout) const$/;"	f	class:StringBoard
source	Sgf.h	/^	std::string source;$/;"	m	struct:GameInfo
str2sgfcommand	SgfCommand.h	/^sgfcommand_t str2sgfcommand(const std::string& str)$/;"	f
string	StringBoard.h	/^		String string;       \/\/ including position played$/;"	m	struct:StringBoard::MoveEffect
string_of	StringBoard.h	/^	const String& string_of(Color color, anchor_t anchor) const$/;"	f	class:StringBoard
strings	StringBoard.h	/^	Strings strings[COLOR_NUM];$/;"	m	class:StringBoard
team	Sgf.h	/^		std::string team;$/;"	m	struct:GameInfo::Player
time	Sgf.h	/^	std::string time;$/;"	m	struct:GameInfo
to	util.h	/^	type to()$/;"	f	struct:exstring
to_pos	Const.h	/^	int to_pos(int x, int y) const$/;"	f	class:Const
to_s	option.h	/^	void to_s(std::ostream& os) const$/;"	f	class:Option
to_xy	Const.h	/^	void to_xy(int pos, int* x, int* y) const$/;"	f	class:Const
tstream	util.h	/^	tstream() { }$/;"	f	struct:tstream
tstream	util.h	/^	tstream(const type& v)$/;"	f	struct:tstream
tstream	util.h	/^struct tstream : public std::stringstream$/;"	s
turn	DiskBoard.h	/^	Color turn;$/;"	m	struct:DiskBoard
type	SgfCommand.h	/^	sgfcommand_t type;$/;"	m	struct:SgfCommand
type	console.h	/^	command_t type;$/;"	m	struct:Command
type_name	SgfCommand.h	/^	std::string type_name;	$/;"	m	struct:SgfCommand
user_of_application	Sgf.h	/^	std::string user_of_application;$/;"	m	struct:GameInfo
valid	option.h	/^		bool valid() const$/;"	f	struct:Option::Value
value	option.h	/^		Value value; \/\/\/ default & given value container$/;"	m	struct:Option::Item
wait_command	console.h	/^	Command wait_command()$/;"	f	struct:Input
white	Sgf.h	/^	Player black, white;$/;"	m	struct:GameInfo
~DiskBoard	DiskBoard.h	/^	~DiskBoard()$/;"	f	struct:DiskBoard
~Input	console.h	/^	~Input()$/;"	f	struct:Input
